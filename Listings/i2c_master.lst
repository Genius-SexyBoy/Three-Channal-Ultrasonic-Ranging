C51 COMPILER V9.54   I2C_MASTER                                                            05/14/2017 11:48:17 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE I2C_MASTER
OBJECT MODULE PLACED IN .\Objects\i2c_master.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE oled\i2c_master.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Inc;.\oled) DEBUG OB
                    -JECTEXTEND PRINT(.\Listings\i2c_master.lst) TABS(2) OBJECT(.\Objects\i2c_master.obj)

line level    source

   1          #include "i2c_master.h"
   2          
   3          uint8 m_nLastSDA;
   4          uint8 m_nLastSCL;
   5          
   6          unsigned char I2C_WIDTH = 0;
   7          
   8          unsigned char I2CMutex = 1;
   9          
  10          void i2c_master_wait(unsigned char t)
  11          {
  12   1        
  13   1        unsigned char i;
  14   1        while(t--)
  15   1        {
  16   2          for(i=1;i>0;i--);
  17   2        }
  18   1        
  19   1      }
  20          /******************************************************************************
  21           * FunctionName : i2c_master_setDC
  22           * Description  : Internal used function -
  23           *                    set i2c SDA and SCL bit value for half clk cycle
  24           * Parameters   : uint8 SDA
  25           *                uint8 SCL
  26           * Returns      : NONE
  27          *******************************************************************************/
  28          void i2c_master_setDC(uint8 SDA, uint8 SCL)
  29          {
  30   1          SDA &= 0x01;
  31   1          SCL &= 0x01;
  32   1          m_nLastSDA = SDA;
  33   1          m_nLastSCL = SCL;
  34   1      
  35   1          if ((0 == SDA) && (0 == SCL))
  36   1          {
  37   2              I2C_MASTER_SDA_LOW_SCL_LOW();
  38   2          }
  39   1          else if ((0 == SDA) && (1 == SCL))
  40   1          {
  41   2              I2C_MASTER_SDA_LOW_SCL_HIGH();
  42   2          }
  43   1          else if ((1 == SDA) && (0 == SCL))
  44   1          {
  45   2              I2C_MASTER_SDA_HIGH_SCL_LOW();
  46   2          }
  47   1          else
  48   1          {
  49   2              I2C_MASTER_SDA_HIGH_SCL_HIGH();
  50   2          }
  51   1      }
  52          
  53          /******************************************************************************
  54           * FunctionName : i2c_master_getDC
C51 COMPILER V9.54   I2C_MASTER                                                            05/14/2017 11:48:17 PAGE 2   

  55           * Description  : Internal used function -
  56           *                    get i2c SDA bit value
  57           * Parameters   : NONE
  58           * Returns      : uint8 - SDA bit value
  59          *******************************************************************************/
  60          uint8 i2c_master_getDC(void)
  61          {
  62   1          uint8 sda_out;
  63   1          sda_out = SDA_PIN;
  64   1          return sda_out;
  65   1      }
  66          
  67          /******************************************************************************
  68           * FunctionName : i2c_master_init
  69           * Description  : initilize I2C bus to enable i2c operations
  70           * Parameters   : NONE
  71           * Returns      : NONE
  72          *******************************************************************************/
  73          void i2c_master_init(void)
  74          {
  75   1          uint8 i;
  76   1      
  77   1          i2c_master_setDC(1, 0);
  78   1          i2c_master_wait(I2C_WIDTH);
  79   1      
  80   1          // when SCL = 0, toggle SDA to clear up
  81   1          i2c_master_setDC(0, 0);
  82   1          i2c_master_wait(I2C_WIDTH);
  83   1          i2c_master_setDC(1, 0);
  84   1          i2c_master_wait(I2C_WIDTH);
  85   1      
  86   1          // set data_cnt to max value
  87   1          for (i = 0; i < 28; i++)
  88   1          {
  89   2              i2c_master_setDC(1, 0);
  90   2              i2c_master_wait(I2C_WIDTH); // sda 1, scl 0
  91   2              i2c_master_setDC(1, 1);
  92   2              i2c_master_wait(I2C_WIDTH); // sda 1, scl 1
  93   2          }
  94   1      
  95   1          // reset all
  96   1          i2c_master_stop();
  97   1          return;
  98   1      }
  99          
 100          /******************************************************************************
 101           * FunctionName : i2c_master_gpio_init
 102           * Description  : config SDA and SCL gpio to open-drain output mode,
 103           *                mux and gpio num defined in i2c_master.h
 104           * Parameters   : NONE
 105           * Returns      : NONE
 106          *******************************************************************************/
 107          void i2c_master_gpio_init(void)
 108          {
 109   1         // i2c_master_init();
 110   1      }
 111          
 112          /******************************************************************************
 113           * FunctionName : i2c_master_start
 114           * Description  : set i2c to send state
 115           * Parameters   : NONE
 116           * Returns      : NONE
C51 COMPILER V9.54   I2C_MASTER                                                            05/14/2017 11:48:17 PAGE 3   

 117          *******************************************************************************/
 118          unsigned char i2c_master_start(void)
 119          {
 120   1          i2c_master_setDC(1, m_nLastSCL);
 121   1          i2c_master_wait(I2C_WIDTH);
 122   1          i2c_master_setDC(1, 1);
 123   1          if(!i2c_master_getDC())
 124   1            return FALSE;
 125   1          i2c_master_wait(I2C_WIDTH); // sda 1, scl 1
 126   1          i2c_master_setDC(0, 1);
 127   1          if(i2c_master_getDC())
 128   1            return FALSE;
 129   1          i2c_master_wait(I2C_WIDTH); // sda 0, scl 1
 130   1          return TRUE;
 131   1      }
 132          
 133          /******************************************************************************
 134           * FunctionName : i2c_master_stop
 135           * Description  : set i2c to stop sending state
 136           * Parameters   : NONE
 137           * Returns      : NONE
 138          *******************************************************************************/
 139          void i2c_master_stop(void)
 140          {
 141   1          i2c_master_wait(I2C_WIDTH);
 142   1      
 143   1          i2c_master_setDC(0, m_nLastSCL);
 144   1          i2c_master_wait(I2C_WIDTH); // sda 0
 145   1          i2c_master_setDC(0, 1);
 146   1          i2c_master_wait(I2C_WIDTH); // sda 0, scl 1
 147   1          i2c_master_setDC(1, 1);
 148   1          i2c_master_wait(I2C_WIDTH); // sda 1, scl 1
 149   1      }
 150          
 151          /******************************************************************************
 152           * FunctionName : i2c_master_setAck
 153           * Description  : set ack to i2c bus as level value
 154           * Parameters   : uint8 level - 0 or 1
 155           * Returns      : NONE
 156          *******************************************************************************/
 157          void i2c_master_setAck(uint8 level)
 158          {
 159   1          i2c_master_setDC(m_nLastSDA, 0);
 160   1          i2c_master_wait(I2C_WIDTH);
 161   1          i2c_master_setDC(level, 0);
 162   1          i2c_master_wait(I2C_WIDTH); // sda level, scl 0
 163   1          i2c_master_setDC(level, 1);
 164   1          i2c_master_wait(I2C_WIDTH); // sda level, scl 1
 165   1          i2c_master_setDC(level, 0);
 166   1          i2c_master_wait(I2C_WIDTH); // sda level, scl 0
 167   1          i2c_master_setDC(1, 0);
 168   1          i2c_master_wait(I2C_WIDTH);
 169   1      }
 170          
 171          /******************************************************************************
 172           * FunctionName : i2c_master_getAck
 173           * Description  : confirm if peer send ack
 174           * Parameters   : NONE
 175           * Returns      : uint8 - ack value, 0 or 1
 176          *******************************************************************************/
 177          uint8 i2c_master_getAck(void)
 178          {
C51 COMPILER V9.54   I2C_MASTER                                                            05/14/2017 11:48:17 PAGE 4   

 179   1          uint8 retVal;
 180   1          i2c_master_setDC(m_nLastSDA, 0);
 181   1          i2c_master_wait(I2C_WIDTH);
 182   1          i2c_master_setDC(1, 0);
 183   1          i2c_master_wait(I2C_WIDTH);
 184   1          i2c_master_setDC(1, 1);
 185   1          i2c_master_wait(I2C_WIDTH);
 186   1          i2c_master_wait(2);
 187   1          retVal = i2c_master_getDC();
 188   1          i2c_master_wait(I2C_WIDTH);
 189   1          i2c_master_setDC(1, 0);
 190   1          i2c_master_wait(I2C_WIDTH);
 191   1      
 192   1          return retVal;
 193   1      }
 194          
 195          /******************************************************************************
 196          * FunctionName : i2c_master_checkAck
 197          * Description  : get dev response
 198          * Parameters   : NONE
 199          * Returns      : true : get ack ; false : get nack
 200          *******************************************************************************/
 201          unsigned char i2c_master_checkAck(void)
 202          {
 203   1          if(i2c_master_getAck())
 204   1          {
 205   2              return FALSE;
 206   2          }
 207   1          else
 208   1          {
 209   2              return TRUE;
 210   2          }
 211   1      }
 212          
 213          
 214          void i2c_master_waitAck(void)
 215          {
 216   1          i2c_master_setDC(m_nLastSDA, 1);
 217   1          i2c_master_wait(I2C_WIDTH);
 218   1          i2c_master_setDC(m_nLastSDA, 0);
 219   1          i2c_master_wait(I2C_WIDTH);
 220   1      }
 221          
 222          /******************************************************************************
 223          * FunctionName : i2c_master_send_ack
 224          * Description  : response ack
 225          * Parameters   : NONE
 226          * Returns      : NONE
 227          *******************************************************************************/
 228          void i2c_master_send_ack(void)
 229          {
 230   1          i2c_master_setAck(0x0);
 231   1      }
 232          /******************************************************************************
 233          * FunctionName : i2c_master_send_nack
 234          * Description  : response nack
 235          * Parameters   : NONE
 236          * Returns      : NONE
 237          *******************************************************************************/
 238          void i2c_master_send_nack(void)
 239          {
 240   1          i2c_master_setAck(0x1);
C51 COMPILER V9.54   I2C_MASTER                                                            05/14/2017 11:48:17 PAGE 5   

 241   1      }
 242          
 243          /******************************************************************************
 244           * FunctionName : i2c_master_readByte
 245           * Description  : read Byte from i2c bus
 246           * Parameters   : NONE
 247           * Returns      : uint8 - readed value
 248          *******************************************************************************/
 249          uint8 i2c_master_readByte(void)
 250          {
 251   1          uint8 retVal = 0;
 252   1          uint8 k, i;
 253   1      
 254   1          i2c_master_wait(I2C_WIDTH);
 255   1          i2c_master_setDC(m_nLastSDA, 0);
 256   1          i2c_master_wait(I2C_WIDTH); // sda 1, scl 0
 257   1      
 258   1          for (i = 0; i < 8; i++)
 259   1          {
 260   2              i2c_master_wait(I2C_WIDTH);
 261   2              i2c_master_setDC(1, 0);
 262   2              i2c_master_wait(I2C_WIDTH); // sda 1, scl 0
 263   2              i2c_master_setDC(1, 1);
 264   2              i2c_master_wait(I2C_WIDTH); // sda 1, scl 1
 265   2      
 266   2              k = i2c_master_getDC();
 267   2              i2c_master_wait(I2C_WIDTH);
 268   2      /*
 269   2              if (i == 7)
 270   2         {
 271   2                  i2c_master_wait(3);   ////
 272   2              }
 273   2      */
 274   2              k <<= (7 - i);
 275   2              retVal |= k;
 276   2          }
 277   1      
 278   1          i2c_master_setDC(1, 0);
 279   1          i2c_master_wait(I2C_WIDTH); // sda 1, scl 0
 280   1      
 281   1          return retVal;
 282   1      }
 283          
 284          /******************************************************************************
 285           * FunctionName : i2c_master_writeByte
 286           * Description  : write wrdata value(one byte) into i2c
 287           * Parameters   : uint8 wrdata - write value
 288           * Returns      : NONE
 289          *******************************************************************************/
 290          void i2c_master_writeByte(uint8 wrdata)
 291          {
 292   1          uint8 dat;
 293   1          sint8 i;
 294   1      
 295   1          i2c_master_wait(I2C_WIDTH);
 296   1      
 297   1          i2c_master_setDC(m_nLastSDA, 0);
 298   1          i2c_master_wait(I2C_WIDTH);
 299   1      
 300   1          for (i = 7; i >= 0; i--)
 301   1          {
 302   2              dat = wrdata >> i;
C51 COMPILER V9.54   I2C_MASTER                                                            05/14/2017 11:48:17 PAGE 6   

 303   2              i2c_master_setDC(dat, 0);
 304   2              i2c_master_wait(I2C_WIDTH);
 305   2              i2c_master_setDC(dat, 1);
 306   2              i2c_master_wait(I2C_WIDTH);
 307   2      /*
 308   2              if (i == 0)
 309   2         {
 310   2                  i2c_master_wait(3);   ////
 311   2              }
 312   2      */
 313   2              i2c_master_setDC(dat, 0);
 314   2              i2c_master_wait(I2C_WIDTH);
 315   2          }
 316   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    427    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
